{"version":3,"sources":["pipeline.js","index.js"],"names":["Pipeline","state","hidden","toggle","setState","prevState","highlight","posTagged","split","map","word","posTag","match","this","props","prediction","className","onClick","role","aria-label","original","preprocessed","pos_tagged","React","Component","NLPInterface","MIN_WORDS","MAX_WORDS","text","wordsHint","loading","error","random","fetch","then","response","json","article","title","getWordsHint","catch","updateInput","value","target","count","length","predict","method","headers","body","JSON","stringify","autoFocus","disabled","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c15f363.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport class Pipeline extends React.Component {\n\n  state = { hidden: true }\n  toggle = () => this.setState(prevState => ({ hidden: !prevState.hidden }));\n\n  highlight = (posTagged) => {\n    return posTagged.split(/\\s/)\n      .map(word => {\n        let posTag = word.match(/([A-Z]+-)(.*)/);\n        if (posTag) {\n          return (<span>posTag[1]</span>) + posTag[2];\n        } else {\n          return word;\n        }\n      })\n  }\n\nrender() {\n  if (this.props.prediction)\n    return (\n      <div className=\"pipeline\">\n        <p className=\"show\" onClick={this.toggle}>\n          {this.state.hidden ? 'Show' : 'Hide'} text processing pipeline <span role=\"img\" aria-label=\"Show pipeline\">⬇️</span></p>\n\n        <div className=\"output\" hidden={this.state.hidden}>\n          <div>\n            <h2>Original text</h2>\n            {this.props.original}\n          </div>\n          <div>\n            <h2>Preprocessed text</h2>\n            {this.props.preprocessed}\n          </div>\n          <div>\n            <h2>Pos-tagged text</h2>\n            {this.highlight(this.props.pos_tagged)}\n          </div>\n        </div>\n      </div>\n    )\n\n  return null\n}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Pipeline } from './pipeline'\nimport './index.scss';\nclass NLPInterface extends React.Component {\n\n  MIN_WORDS = 100;\n  MAX_WORDS = 2000;\n\n  state = {\n    text: '',\n    wordsHint: `You have to write at least ${this.MIN_WORDS} words`,\n    loading: false,\n    error: false,\n    prediction: null,\n    original: null,\n    pos_tagged: null,\n    preprocessed: null\n  }\n\n\n  random = () => fetch(\"/random\")\n    .then(response => response.json())\n    .then(article => article.title + '\\n\\n' + article.text)\n    .then(text => this.setState({ text, wordsHint: this.getWordsHint(text) }))\n    .catch(error => this.setState({ error: true }));\n\n  updateInput = ({ target: { value } }) => this.setState({ text: value, prediction: null, wordsHint: this.getWordsHint(value) });\n\n  getWordsHint = (text) => {\n    let count = text.split(/\\s/).length;\n    if (count < this.MIN_WORDS) return `You have to write ${this.MIN_WORDS - count} more words`\n    if (count >= this.MIN_WORDS) return `You can write up to ${this.MAX_WORDS - count} more words`\n  }\n  predict = () => {\n    if (this.MAX_WORDS - this.state.text.split(/\\s/).length < 0) return;\n\n    this.setState({ loading: true, prediction: null });\n\n    fetch(\"/predict\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state.text)\n    })\n      .then(response => response.json())\n      .then(({ original, pos_tagged, preprocessed, prediction }) => {\n        this.setState({ loading: false, prediction, original, pos_tagged, preprocessed })\n      })\n      .catch(error => this.setState({ loading: false, error: true }))\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>NLP Fake News Detector Classifier</h1>\n        <textarea autoFocus disabled={this.state.loading} value={this.state.text} onChange={this.updateInput}>\n        </textarea>\n\n        <span className=\"hint\"> {this.state.wordsHint}</span>\n\n        <button disabled={this.state.loading} className=\"random\" onClick={this.random}> Load random News from test dataset ? Click here.</button>\n        <button disabled={this.state.loading || this.MAX_WORDS - this.state.text.split(/\\s/).length < 0} className=\"cta\" onClick={this.predict}> Predict </button>\n\n        {this.state.loading ? <h1>Classifying ...</h1> : ''}\n\n        {this.state.error ? <h1>ERROR</h1> : ''}\n\n        <h1 className={this.state.prediction}>\n          {this.state.prediction}\n        </h1>\n\n        <Pipeline\n          prediction={this.state.prediction}\n          original={this.state.original}\n          pos_tagged={this.state.pos_tagged}\n          preprocessed={this.state.preprocessed}\n        />\n      </div>\n    )\n  }\n}\n\n\n\nReactDOM.render(\n  <NLPInterface />,\n  document.getElementById('root'));\n"],"sourceRoot":""}